{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johne\\\\OneDrive\\\\Documentos\\\\Efrain\\\\Lionta\\\\frontend\\\\src\\\\components\\\\VerificarCuenta.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VerificarCuenta = () => {\n  _s();\n  const {\n    token\n  } = useParams();\n  const [nuevaContraseña, setNuevaContraseña] = useState(\"\");\n  const [mensaje, setMensaje] = useState(\"\");\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/verificar/${token}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          nueva_contraseña: nuevaContraseña\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMensaje(\"Cuenta verificada y contraseña establecida correctamente.\");\n        setTimeout(() => navigate(\"/login\"), 2000); // Redirige al login\n      } else {\n        setMensaje(data.error || \"Error al verificar la cuenta.\");\n      }\n    } catch (error) {\n      setMensaje(\"Error de conexión con el servidor.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Verificar Cuenta y Establecer Contrase\\xF1a\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Nueva Contrase\\xF1a:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: nuevaContraseña,\n        onChange: e => setNuevaContraseña(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Establecer Contrase\\xF1a\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), mensaje && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: mensaje\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(VerificarCuenta, \"TIwvb2L3guRPT4C7+7gHwZPx2PU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = VerificarCuenta;\nexport default VerificarCuenta;\nvar _c;\n$RefreshReg$(_c, \"VerificarCuenta\");","map":{"version":3,"names":["React","useState","useParams","useNavigate","jsxDEV","_jsxDEV","VerificarCuenta","_s","token","nuevaContraseña","setNuevaContraseña","mensaje","setMensaje","navigate","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","nueva_contraseña","data","json","ok","setTimeout","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/johne/OneDrive/Documentos/Efrain/Lionta/frontend/src/components/VerificarCuenta.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\n\r\nconst VerificarCuenta = () => {\r\n  const { token } = useParams();\r\n  const [nuevaContraseña, setNuevaContraseña] = useState(\"\");\r\n  const [mensaje, setMensaje] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const response = await fetch(`http://127.0.0.1:5000/verificar/${token}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ nueva_contraseña: nuevaContraseña }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setMensaje(\"Cuenta verificada y contraseña establecida correctamente.\");\r\n        setTimeout(() => navigate(\"/login\"), 2000); // Redirige al login\r\n      } else {\r\n        setMensaje(data.error || \"Error al verificar la cuenta.\");\r\n      }\r\n    } catch (error) {\r\n      setMensaje(\"Error de conexión con el servidor.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Verificar Cuenta y Establecer Contraseña</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>Nueva Contraseña:</label>\r\n        <input\r\n          type=\"password\"\r\n          value={nuevaContraseña}\r\n          onChange={(e) => setNuevaContraseña(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">Establecer Contraseña</button>\r\n      </form>\r\n      {mensaje && <p>{mensaje}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VerificarCuenta;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAM,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC7B,MAAM,CAACO,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMY,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9B,MAAMW,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmCV,KAAK,EAAE,EAAE;QACvEW,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,gBAAgB,EAAEf;QAAgB,CAAC;MAC5D,CAAC,CAAC;MAEF,MAAMgB,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAElC,IAAIT,QAAQ,CAACU,EAAE,EAAE;QACff,UAAU,CAAC,2DAA2D,CAAC;QACvEgB,UAAU,CAAC,MAAMf,QAAQ,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MAC9C,CAAC,MAAM;QACLD,UAAU,CAACa,IAAI,CAACI,KAAK,IAAI,+BAA+B,CAAC;MAC3D;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdjB,UAAU,CAAC,oCAAoC,CAAC;IAClD;EACF,CAAC;EAED,oBACEP,OAAA;IAAAyB,QAAA,gBACEzB,OAAA;MAAAyB,QAAA,EAAI;IAAwC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjD7B,OAAA;MAAM8B,QAAQ,EAAErB,YAAa;MAAAgB,QAAA,gBAC3BzB,OAAA;QAAAyB,QAAA,EAAO;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAChC7B,OAAA;QACE+B,IAAI,EAAC,UAAU;QACfC,KAAK,EAAE5B,eAAgB;QACvB6B,QAAQ,EAAGvB,CAAC,IAAKL,kBAAkB,CAACK,CAAC,CAACwB,MAAM,CAACF,KAAK,CAAE;QACpDG,QAAQ;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACF7B,OAAA;QAAQ+B,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,EACNvB,OAAO,iBAAIN,OAAA;MAAAyB,QAAA,EAAInB;IAAO;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA/CID,eAAe;EAAA,QACDJ,SAAS,EAGVC,WAAW;AAAA;AAAAsC,EAAA,GAJxBnC,eAAe;AAiDrB,eAAeA,eAAe;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}