{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rutr5\\\\lionta\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loginError, setLoginError] = useState(null);\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    const loggedIn = localStorage.getItem(\"isLoggedIn\") === \"true\";\n    if (token && loggedIn) {\n      setIsLoggedIn(true);\n      setUser(JSON.parse(localStorage.getItem(\"user\")));\n    }\n  }, []);\n\n  // Función para iniciar sesión que parece usar HomePage.js\n  const login = async (email, password, rememberMe) => {\n    setIsLoading(true);\n    setLoginError(null);\n    try {\n      // Aquí iría tu lógica de autenticación con el backend\n      // Por ahora implementamos un placeholder que simula lo que tú ya tienes\n      const userData = await fetchUserData(email, password);\n\n      // Guardar datos en localStorage\n      localStorage.setItem(\"token\", userData.token);\n      localStorage.setItem(\"user\", JSON.stringify(userData.user));\n      localStorage.setItem(\"isLoggedIn\", \"true\");\n\n      // Actualizar estado\n      setIsLoggedIn(true);\n      setUser(userData.user);\n      setIsLoading(false);\n      return userData;\n    } catch (error) {\n      setLoginError(error.message || \"Error al iniciar sesión\");\n      setIsLoading(false);\n      throw error;\n    }\n  };\n\n  // Función placeholder para simular la petición de login al backend\n  const fetchUserData = async (email, password) => {\n    // Esta función debería reemplazarse con tu llamada real a la API\n    // Esto es solo un placeholder para que la función login tenga sentido\n    return new Promise((resolve, reject) => {\n      // Simular delay de red\n      setTimeout(() => {\n        // Aquí vendría tu lógica de verificación\n        resolve({\n          token: \"token-simulado\",\n          user: {\n            email: email,\n            rol: email.includes(\"admin\") ? \"admin\" : \"jugador\"\n            // Otros datos del usuario\n          }\n        });\n      }, 500);\n    });\n  };\n\n  // Función para cerrar sesión\n  const logout = () => {\n    // Limpiar localStorage\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"isLoggedIn\");\n\n    // Actualizar estado\n    setIsLoggedIn(false);\n    setUser(null);\n\n    // Opcional: redirigir a la página principal\n    window.location.href = \"/\";\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      setIsLoggedIn,\n      user,\n      setUser,\n      login,\n      logout,\n      isLoading,\n      loginError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"f1ipi1XWeb6RY6q/bVvL/Lk2h4A=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","user","setUser","isLoading","setIsLoading","loginError","setLoginError","token","localStorage","getItem","loggedIn","JSON","parse","login","email","password","rememberMe","userData","fetchUserData","setItem","stringify","error","message","Promise","resolve","reject","setTimeout","rol","includes","logout","removeItem","window","location","href","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rutr5/lionta/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [loginError, setLoginError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    const loggedIn = localStorage.getItem(\"isLoggedIn\") === \"true\";\r\n\r\n    if (token && loggedIn) {\r\n      setIsLoggedIn(true);\r\n      setUser(JSON.parse(localStorage.getItem(\"user\")));\r\n    }\r\n  }, []);\r\n\r\n  // Función para iniciar sesión que parece usar HomePage.js\r\n  const login = async (email, password, rememberMe) => {\r\n    setIsLoading(true);\r\n    setLoginError(null);\r\n    \r\n    try {\r\n      // Aquí iría tu lógica de autenticación con el backend\r\n      // Por ahora implementamos un placeholder que simula lo que tú ya tienes\r\n      const userData = await fetchUserData(email, password);\r\n      \r\n      // Guardar datos en localStorage\r\n      localStorage.setItem(\"token\", userData.token);\r\n      localStorage.setItem(\"user\", JSON.stringify(userData.user));\r\n      localStorage.setItem(\"isLoggedIn\", \"true\");\r\n      \r\n      // Actualizar estado\r\n      setIsLoggedIn(true);\r\n      setUser(userData.user);\r\n      setIsLoading(false);\r\n      return userData;\r\n    } catch (error) {\r\n      setLoginError(error.message || \"Error al iniciar sesión\");\r\n      setIsLoading(false);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Función placeholder para simular la petición de login al backend\r\n  const fetchUserData = async (email, password) => {\r\n    // Esta función debería reemplazarse con tu llamada real a la API\r\n    // Esto es solo un placeholder para que la función login tenga sentido\r\n    return new Promise((resolve, reject) => {\r\n      // Simular delay de red\r\n      setTimeout(() => {\r\n        // Aquí vendría tu lógica de verificación\r\n        resolve({\r\n          token: \"token-simulado\",\r\n          user: {\r\n            email: email,\r\n            rol: email.includes(\"admin\") ? \"admin\" : \"jugador\",\r\n            // Otros datos del usuario\r\n          }\r\n        });\r\n      }, 500);\r\n    });\r\n  };\r\n\r\n  // Función para cerrar sesión\r\n  const logout = () => {\r\n    // Limpiar localStorage\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"isLoggedIn\");\r\n    \r\n    // Actualizar estado\r\n    setIsLoggedIn(false);\r\n    setUser(null);\r\n    \r\n    // Opcional: redirigir a la página principal\r\n    window.location.href = \"/\";\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider \r\n      value={{ \r\n        isLoggedIn, \r\n        setIsLoggedIn, \r\n        user, \r\n        setUser, \r\n        login,\r\n        logout,\r\n        isLoading,\r\n        loginError\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}